import os
import tkinter as tk
from tkinter import filedialog, messagebox
import ttkbootstrap as ttk

def consolidar_y_separar_txt(directorio, salida_base='salida'):
    """
    Lee todos los archivos .txt de un directorio, separa las líneas por
    categoría, elimina duplicados y guarda los resultados en nuevos archivos.
    """
    try:
        # Usar sets para almacenar líneas únicas y evitar duplicados automáticamente.
        usuarias, atenciones, seguimientos, urgencias = set(), set(), set(), set()
        
        # Nombres de los archivos de salida para evitar leerlos si el script se corre de nuevo.
        archivos_salida = ['usuarias.txt', 'atenciones.txt', 'seguimientos.txt', 'urgencias.txt', 'consolidado.txt']

        for archivo in os.listdir(directorio):
            # Procesar solo si es un .txt y no es uno de los archivos de salida.
            if archivo.endswith('.txt') and archivo not in archivos_salida:
                with open(os.path.join(directorio, archivo), 'r', encoding='utf-8') as f:
                    for linea in f:
                        linea_limpia = linea.strip()  # Limpiar espacios/saltos de línea.
                        if not linea_limpia:  # Omitir líneas completamente en blanco.
                            continue

                        # Añadir la línea limpia + un salto de línea al set correspondiente.
                        # El set se encarga de ignorar los duplicados.
                        if linea_limpia.startswith('2'):
                            usuarias.add(linea_limpia + '\n')
                        elif linea_limpia.startswith('3'):
                            atenciones.add(linea_limpia + '\n')
                        elif linea_limpia.startswith('4'):
                            seguimientos.add(linea_limpia + '\n')
                        elif linea_limpia.startswith('5'):
                            urgencias.add(linea_limpia + '\n')

        # Convertir los sets a listas y ordenarlas para una salida consistente.
        lista_usuarias = sorted(list(usuarias))
        lista_atenciones = sorted(list(atenciones))
        lista_seguimientos = sorted(list(seguimientos))
        lista_urgencias = sorted(list(urgencias))

        # Guardar archivos por tipo
        with open(os.path.join(directorio, 'usuarias.txt'), 'w', encoding='utf-8') as f:
            f.writelines(lista_usuarias)
        with open(os.path.join(directorio, 'atenciones.txt'), 'w', encoding='utf-8') as f:
            f.writelines(lista_atenciones)
        with open(os.path.join(directorio, 'seguimientos.txt'), 'w', encoding='utf-8') as f:
            f.writelines(lista_seguimientos)
        with open(os.path.join(directorio, 'urgencias.txt'), 'w', encoding='utf-8') as f:
            f.writelines(lista_urgencias)

        # Guardar consolidado
        with open(os.path.join(directorio, 'consolidado.txt'), 'w', encoding='utf-8') as f:
            f.writelines(lista_usuarias + lista_atenciones + lista_seguimientos + lista_urgencias)

        messagebox.showinfo("Éxito", "¡Archivos generados exitosamente y sin duplicados!")

    except Exception as e:
        messagebox.showerror("Error", f"Ocurrió un error: {str(e)}")

def seleccionar_carpeta():
    carpeta = filedialog.askdirectory()
    if carpeta:
        entrada_ruta.delete(0, tk.END)
        entrada_ruta.insert(0, carpeta)

def procesar():
    ruta = entrada_ruta.get()
    if not ruta or not os.path.isdir(ruta):
        messagebox.showwarning("Advertencia", "Selecciona una carpeta válida.")
        return
    consolidar_y_separar_txt(ruta)

# === INTERFAZ (sin cambios) ===
ventana = ttk.Window(themename="cyborg")
ventana.title("Consolidador de TXT por tipo")
ventana.geometry("500x200")
ventana.resizable(False, False)

ttk.Label(ventana, text="Selecciona la carpeta con los .txt:", font=("Segoe UI", 12)).pack(pady=10)

frame = ttk.Frame(ventana)
frame.pack(pady=5)

entrada_ruta = ttk.Entry(frame, width=40)
entrada_ruta.pack(side=tk.LEFT, padx=5)

btn_seleccionar = ttk.Button(frame, text="Examinar", command=seleccionar_carpeta)
btn_seleccionar.pack(side=tk.LEFT)

btn_procesar = ttk.Button(ventana, text="Procesar", bootstyle="success", command=procesar)
btn_procesar.pack(pady=20)

ventana.mainloop()
